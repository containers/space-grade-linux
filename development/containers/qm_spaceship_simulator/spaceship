#!/usr/bin/python
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import subprocess
import time
import os
import sys
import shutil
import argparse

class SpaceshipManager:
    def __init__(self, num_engines):
        self.num_engines = num_engines
        self.spaceship_IP = None
        self.engines_IP = {}

    @staticmethod
    def run_command(command):
        try:
            print(f"Running: {' '.join(command)}")
            subprocess.run(command, shell=False, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running command: {e}")
            print(f"Command output: {e.output}")
            print(f"Command stderr: {e.stderr}")
            raise

    @staticmethod
    def get_container_ip(container_name):
        """Retrieves the IP address of a given container."""
        command = ["podman", "exec", "-it", container_name, "hostname", "-I"]
        result = subprocess.check_output(command, text=True).strip()
        return result.split()[0]

    def update_containerfile(self):
        """Updates the Containerfile with engine-specific names, including dynamic lists of engines."""
        containerfile_path = "Containerfile"
        engine_list = ",".join([f"engine{i}-spaceship" for i in range(1, self.num_engines + 1)])

        updated_lines = []
        with open(containerfile_path, "r") as file:
            for line in file:
                # Replace placeholder with the dynamic engine list in AllowedNodeNames
                if "AllowedNodeNames=spaceship_base,engineX-spaceship" in line:
                    updated_line = line.replace("engineX-spaceship", engine_list)
                    updated_lines.append(updated_line)
                else:
                    updated_lines.append(line)

        with open(containerfile_path, "w") as file:
            file.writelines(updated_lines)

        print(f"Updated {containerfile_path} with {self.num_engines} engines.")

    def setup_spaceship_base(self):
        """Sets the Spaceship Base entry in /etc/hosts and restarts required services."""
        try:
            self.spaceship_IP = self.get_container_ip("spaceship_base")
            print(f"Spaceship Base IP: {self.spaceship_IP}")

            command_add_hosts = [
                "podman", "exec", "-it", "spaceship_base", "bash", "-c",
                f"echo '{self.spaceship_IP} spaceship_base' >> /etc/hosts"
            ]
            self.run_command(command_add_hosts)

            time.sleep(1)

            self.run_command(["podman", "exec", "-it", "spaceship_base", "bash", "-c", "systemctl restart bluechi-controller"])
            time.sleep(1)
            self.run_command(["podman", "exec", "-it", "spaceship_base", "bash", "-c", "systemctl restart bluechi-agent"])

            print("Spaceship base setup complete.")
        except subprocess.CalledProcessError as e:
            print(f"An error occurred while executing a command: {e}")
            raise

    def check_service_ready(self, engine_name, service_name):
        """Check if a service is active and ready before restarting it."""
        try:
            self.run_command([
                "podman", "exec", "-it", engine_name, "bash", "-c",
                f"systemctl restart {service_name}"
            ])
            print(f"Service {service_name} on {engine_name} is active and ready.")
            return True
        except subprocess.CalledProcessError:
            print(f"Service {service_name} on {engine_name} is not active. Waiting...")
            return False

    def configure_engines(self):
        """Configures engines with IP and updates /etc/hosts."""
        for i in range(1, self.num_engines + 1):
            engine_name = f"engine{i}-spaceship"
            engine_ip = self.get_container_ip(engine_name)
            self.engines_IP[engine_name] = engine_ip
            print(f"Engine{i} IP: {engine_ip}")

            self.run_command([
                "podman", "exec", "-it", engine_name, "bash", "-c",
                f"echo '{engine_ip} {engine_name}' >> /etc/hosts"
            ])
            self.run_command([
                "podman", "exec", "-it", engine_name, "bash", "-c",
                f"echo '{self.spaceship_IP} spaceship_base' >> /etc/hosts"
            ])

            ready = False
            retries = 5
            while not ready and retries > 0:
                ready = self.check_service_ready(engine_name, "bluechi-agent")
                if not ready:
                    self.run_command([
                        "podman", "exec", "-it", engine_name, "bash", "-c",
                        "sleep 10"
                    ])
                    retries -= 1

            if ready:
                self.run_command([
                    "podman", "exec", "-it", engine_name, "bash", "-c",
                    "systemctl restart bluechi-agent"
                ])
            else:
                print(f"Service bluechi-agent on {engine_name} is not ready after multiple attempts.")

    def prepare_containerfile(self, engine_number):
        """Copies the template Containerfile and customizes it for a specific engine."""
        template_path = "engines/template-Containerfile_engine"
        engine_path = f"engines/Containerfile_engine{engine_number}"
        print(f"Preparing Containerfile for Engine {engine_number}: {engine_path}")
        shutil.copy(template_path, engine_path)

        sed_command = [
            "sed", "-i",
            f"s/NodeName=engineX-spaceship/NodeName=engine{engine_number}-spaceship/",
            engine_path
        ]
        self.run_command(sed_command)

    def build_qm(self):
        """Builds the spaceship base container."""
        build_command = [
            "podman", "build", "--cap-add=sys_admin", "-f", "Containerfile",
            "-t", "localhost/spaceship:latest", "."
        ]
        self.run_command(build_command)

    def build_engine(self, engine_number):
        """Builds a specific engine container."""
        self.prepare_containerfile(engine_number)
        build_command = [
            "podman", "build", "--cap-add=sys_admin", "-f", f"engines/Containerfile_engine{engine_number}",
            "-t", f"localhost/engine{engine_number}-spaceship:latest", "."
        ]
        self.run_command(build_command)

    def run_engine(self, engine_number):
        """Runs a specific engine container with --replace to ensure idempotency."""
        self.run_command([
            "podman", "run", "--replace", "-d", "--systemd=true", "--name", f"engine{engine_number}-spaceship",
            "--privileged", f"localhost/engine{engine_number}-spaceship:latest"
        ])

    def main(self):
        """Main function to build and run the spaceship base and engines."""
        self.update_containerfile()  # Update the Containerfile before building
        self.build_qm()
        self.run_command([
            "podman", "run", "--replace", "-d", "--systemd=true", "--name", "spaceship_base",
            "--privileged", "localhost/spaceship:latest"
        ])

        self.setup_spaceship_base()

        for i in range(1, self.num_engines + 1):
            self.build_engine(i)
            self.run_engine(i)

        self.configure_engines()

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("This script must be run as root. Please use sudo or switch to the root user.")
        sys.exit(1)

    parser = argparse.ArgumentParser(description="Build and run podman engine containers.")
    parser.add_argument("num_engines", type=int, help="Number of engines to build and run")
    parser.add_argument("--setup-qm", action="store_true", help="Only setup and build the spaceship base (QM)")
    args = parser.parse_args()

    manager = SpaceshipManager(args.num_engines)

    if args.setup_qm:
        manager.update_containerfile()  # Update the Containerfile before building
        manager.build_qm()              # Build the spaceship base container
    else:
        manager.main()
